version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: videomatch-postgres-dev
    environment:
      POSTGRES_DB: videomatch_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: videomatch123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - videomatch-dev-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: videomatch-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - videomatch-dev-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API (Development)
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: videomatch-backend-dev
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: videomatch_dev
      DB_USER: postgres
      DB_PASSWORD: videomatch123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your_jwt_secret_here_development
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    volumes:
      - ../backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - videomatch-dev-network
    restart: unless-stopped
    command: npm run dev

  # Frontend React App (Development)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: videomatch-frontend-dev
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_WS_URL: http://localhost:5000
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - videomatch-dev-network
    restart: unless-stopped
    command: npm start

  # Adminer (Database management tool)
  adminer:
    image: adminer:latest
    container_name: videomatch-adminer-dev
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - videomatch-dev-network
    restart: unless-stopped

  # Redis Commander (Redis management tool)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: videomatch-redis-commander-dev
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - videomatch-dev-network
    restart: unless-stopped

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  videomatch-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
