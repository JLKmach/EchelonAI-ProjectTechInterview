version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: videomatch-postgres
    environment:
      POSTGRES_DB: videomatch
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: videomatch123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - videomatch-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: videomatch-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - videomatch-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: videomatch-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: videomatch
      DB_USER: postgres
      DB_PASSWORD: videomatch123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your_jwt_secret_here_development
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    volumes:
      - ../backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - videomatch-network
    restart: unless-stopped
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: videomatch-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_WS_URL: http://localhost:5000
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - videomatch-network
    restart: unless-stopped
    command: npm start

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: videomatch-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - videomatch-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  videomatch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
